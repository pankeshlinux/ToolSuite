Spec :  (vocSpec = VocSpec | archSpec = ArchSpec | networkSpec = NetworkSpec);

/* Network Specification */


NetworkSpec:
	 ( 'devices' ':' (devices += Device)+ ) +	 
;

Device:
	deviceName =  ID ':'
	( 'region' ':' ( deviceRegions += DeviceRegions)+ )*   
	( 'type' ':' ( deviceType += DeviceType) )*        
	 ( 'resources' ':' (deviceAbilities += DeviceAbilities )+ )* ';'	
;


DeviceRegions:
     regionLabel = [RegionLabel] ':' regionValue = INT ';'
;


DeviceType:
	deviceType = ID ';'
;


//DeviceAbilities:
//	 ( deviceAbilitiesName = DeviceAbilitiesName) + 
//;

DeviceAbilities :
	deviceEntityName = [EntityName] ( ',' name = DeviceAbilities ) ? 
;


//DeviceAbilitiesName:
//	deviceEntityName = [EntityName] ( ',' name = DeviceAbilitiesName ) ?
//;







ArchSpec:
	
      // Architecture Specification  may not has Structure Definition
	 ('structs' ':' (structs += Struct)+ ) *
	 
	 'softwarecomponents' ':' 
	 
	 // Architecture specification may not contain Storage Service definition.
	 //('storageservice' ':'  (storageService += StorageService)+ )* 
	 
	 
	 // Architecture Specification may not contain Computational Service definition
	 ('computationalService' ':' (computationalService += ComputationalService)+ )*  
	  	  
	  // Architecture Specification must contain controller definition.
	   'controller' ':' (controller += Controller)+ 
	  //('controller' ':' (controller += Controller)+ )+
	 // ((controller += Controller)+ )+

		  

;




/*  Computational Service Definition */


ComputationalService:
	computationalServiceName = ID 
	( (sources += Sources) |  // generate
	(inputs += Inputs) |  // Consume
	(requests += Requests )    |  // request to database service
	(commands += Command)  | // command 
	(deploymentAttribute += DeploymentAttribute))*
;

Requests:
	'request' requestname = [SourceName]  ';'
;


DeploymentAttribute:
	'partition-per' ':' name=[RegionLabel] ';'
;


Inputs:
	'consume' name= [SourceName] ('from' 'region-hops' ':' regionID = INT ':'  regionLabel = [RegionLabel] )? ';'
;



/*   Controller Service Definition */



Controller:
	controllerName = ID
	((inputs += Inputs) |  // Consume 
	(commands += Command)|  
	(  deploymentAttribute += DeploymentAttribute)
	)*
		
;

Command:
	'command' commandName = [ActionName]  '(' (commandparameter = CommandParameter)?')'  'to' 'region-hops' ':' regionID = INT ':'  regionLabel = [RegionLabel] ';'	
;

CommandParameter:
	name = [ParameterName] ( ',' parameter = CommandParameter ) ?
;


/*
 *  This is  Vocabulary Specification 
*/

VocSpec:	
	
	// Vocabulary Specification must have region Specification
	('regions' ':' (regions += Region)+ )+
	
	  
	 // It is not mandatory that Vocabulary Specification must have Structure definition
	 ('structs' ':' (structs += Struct)* )*
	  	 
	 
	 'resources' ':'
	  // Vocabulary Specification must have one sensor specification
	  ('sensors' ':' (sensors += Sensor)+  )+   
	    
	       
	   // Vocabulary Specification must have one actuator specification
	  ('actuators' ':' (actuators += Actuator)+ )+   
	    
	 // Vocabulary specification may not contain Storage Service definition.
	 ('storages' ':'  (storageService += StorageService)+ )* 
	 
	  
;

/* Region Definition */


Region: regionLabel = RegionLabel ':' regionType = Type ';';

RegionLabel: name = ID ;


/* Structure Definition */

Struct: name = ID (fields += Field)+ ;

Field: name=ID ':' type += Type ';' ;


/* Sensor Definition */

Sensor:  sensorName = EntityName ((sources += Sources) )* ;

EntityName:  name = ID ;


Sources: 'generate' sourceName = SourceName ':' type = Type ';';

SourceName: name = ID; 



/* Actuator Definition */

Actuator: actuatorName = EntityName ((actions += Actions))* ;

Actions: 'action' actionName= ActionName '(' (parameters += Parameters)* ')' ';' ;

ActionName: name = ID ; 

Parameters: parameterName = ParameterName ':' type = Type ;

ParameterName:
	name = ID
;



/*  Storage Service Definition  */

StorageService:
	storageServiceName = EntityName
	((dataAccesses += DataAccess) )*
;

DataAccess:
	'generate' sourceName = SourceName ':' dataAccessType = Type  
	'accessed-by' dataItem = ID ':' type = Type ';' 	
;



/* Type Definition */

Type :
	(primitiveDataType = PrimitiveDataType | structDef = [Struct]) 
;

PrimitiveDataType:
	INTEGER = 'Integer' | BOOLEAN = 'boolean' | STRING = 'String' | LONG = 'long' | DOUBLE = 'double'
;
