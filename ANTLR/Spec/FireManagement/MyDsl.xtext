grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

generate myDsl "http://www.xtext.org/example/mydsl/MyDsl"

Spec :
	(vocSpec = VocSpec | archSpec = ArchSpec) 
;

/*
 * Architecture Specification Grammar
 * 
 * 
 */

ArchSpec:
	
      // Architecture Specification  may not has Structure Definition
	 ('structs' ':' (structs += Struct)+ ) *
	 
	 'softwarecomponents' ':' 
	 
	 // Architecture specification may not contain Storage Service definition.
	 ('storageservice' ':'  (storageService += StorageService)+ )* 
	 
	 
	 // Architecture Specification may not contain Computational Service definition
	 ('computationalService' ':' (computationalService += ComputationalService)+ ) *  
	  	  
	  // Architecture Specification must contain controller definition.
	 ('controller' ':' (controller += Controller)+ )+	  

;


/*  Storage Service Definition  */

StorageService:
	storageServiceName = ID 
	((dataAccesses += DataAccess) |
	'deployment-instance' ':' 'singleton' ';' )*
;

DataAccess:
	'generate' dataAccessDef = ID ':' dataAccessType = Type  
	'accessed-by' dataItem = ID ':' type = Type ';' 	
;


/*  Computational Service Definition */


ComputationalService:
	computationalServiceName = ID 
	( (sources += Sources) |  // generate
	(inputs += Inputs) |  // Consume
	(requests += Requests )    |  // request to database service
	(deploymentAttribute += DeploymentAttribute))*
;

Requests:
	'request' requestname = [SourceName]  
;


DeploymentAttribute:
	'partition-per' ':' name=[RegionLabel] ';'
;


Inputs:
	'consume' name= [SourceName] ('from' 'region-hops' ':' regionID = INT ':'  regionLabel = [RegionLabel] )? ';'
;



/*   Controller Service Definition */



Controller:
	controllerName = ID
	((inputs += Inputs) |  // Consume 
	(commands += Command)|  
	(  deploymentAttribute += DeploymentAttribute)
	)*
		
;

Command:
	'command' actuatorName = ID ('_' commandName = ID )? '(' ')'  'to' 'region-hops' ':' regionID = INT ':'  regionLabel = [RegionLabel] ';'	
;

/*
 *  This is  Vocabulary Specification 
*/


VocSpec:
	
	
	// Vocabulary Specification must have region Specification
	('regions' ':' (regions += Region)+ )+
	
	  
	  // It is not mandatory that Vocabulary Specification must have Structure definition
	   ('structs' ':' (structs += Struct)* )*
	  	 
	 
	 'abilities' ':'
	     // Vocabulary Specification must have one sensor specification
	    ('sensors' ':' (sensors += Sensor)+  )+   
	    
	       
	     // Vocabulary Specification must have one actuator specification
	    ('actuators' ':' (actuators += Actuator)+ )+   
	  
;

/* Region Definition */


Region: regionLabel = RegionLabel ':' regionType = Type ';';

RegionLabel: name = ID ;


/* Structure Definition */

Struct: name = ID (fields += Field)+ ;

Field: name=ID ':' type += Type ';' ;


/* Sensor Definition */

Sensor:  sensorName = ID ((sources += Sources) )* ;

Sources: 'generate' sourceName = SourceName ':' type = Type ';';

SourceName: name = ID; 



/* Actuator Definition */

Actuator: actuatorName = ID ((actions += Actions))* ;

Actions: 'action' name=ID '(' (parameters += Parameters)* ')' ';' ;

Parameters: name = ID ':' type = Type ;



/* Type Definition */

Type :
	(primitiveDataType = PrimitiveDataType | structDef = [Struct]) 
;

PrimitiveDataType:
	INTEGER = 'Integer' | BOOLEAN = 'boolean' | STRING = 'String' | LONG = 'long' | DOUBLE = 'double'
;

